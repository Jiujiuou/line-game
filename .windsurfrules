总是用中文回复我

你是一个优秀的前端开发工程师，熟悉掌握 react 16 及以上语法，熟悉 react hooks 与 less


我希望实现一个 web app 的小游戏，游戏的玩法有点类似于 1 笔画，要求玩家一次连接所有的格子。
与一笔画不同之处在于，格子中会有一些提示的数字，数字表示要求这个格子第几个被连接 
【1】【2】【3】 
【 】【 】【4】 
【 】【 】【5】
比如说上面这种情况，要求先从左上角往右上角连接，再从右上角连接到右下角。
其他没有提示数字的格子，可以按照任意顺序连接，只需要满足两个条件即可认为是胜利：
1 是所有格子都被连接
2 是格子连接的顺序符合格子内的提示。 

在连接的过程中，只能连接相邻的格子，并且是未被连接过的格子，不能斜着连接格子


游戏规则
1. 提示数字的作用：
  - 每个关卡都会包含提示数字，提示数字不一定连续（如 1、5、7）。
  - 玩家需要按照提示数字的顺序连接格子。
  - 目标：玩家需要按照提示数字的顺序连接格子，从数字最小的格子开始，依次连接到数字最大的格子。
  - 自由填充：提示数字之间的空白格子可以自由选择，但必须确保最终的路径符合提示数字的顺序要求。


2. 格子的连接规则：
  - 只能连接相邻的格子（水平、垂直、对角线相邻）。
  - 玩家需按顺序依次连接提示数字所在的格子，中间的空白格子可以自由选择。
  - 相邻规则：只能连接与当前格子水平或垂直相邻的格子；对角线相邻不被视为相邻。
    - 示例：对于一个 3×3 的棋盘，中心格子的相邻格子是上、下、左、右的 4 个格子，左上角的格子相邻的格子是右侧和下方的两个格子。
  - 路径约束：
    1. 如果玩家尝试连接不相邻的格子，不会绘制路径，系统无反馈。
    2. 如果玩家尝试跳跃格子不绘制


3. 路径状态的提示：
  - 如果路径连接错误（如顺序不符），当前提示数字的格子背景会变为浅红色，其他部分不变。
  - 如果玩家在错误路径上完成整个棋盘的连接，网格背景变浅红，保留错误路径，供用户观察并调整。
  - 错误提示：
    1. 如果在连接过程中发现提示数字的顺序不符，当前提示数字所在格子的背景会变为浅红色。
    2. 如果玩家错误地连接完成整个棋盘，则网格背景整体变为浅红色，同时保留错误路径，方便玩家观察和调整。
  - 路径绘制规则：
    - 只有在符合相邻规则的情况下，路径会被绘制。
    - 鼠标拖拽过程中，实时绘制路径；如果回溯，之前的路径自动撤销。


4. 完成连接后的状态：
  - 路径保留：
    - 鼠标松开后，绘制完成的路径会保留在棋盘上。
    - 如果重新点击棋盘并开始新的路径，之前的路径会自动清除。
  - 提交状态：
    - 玩家在完成路径绘制后，需要提交解法；系统根据当前路径校验解法是否正确。


5. 游戏失败与重置：
  - 失败机制：
    - 没有传统意义上的“失败”，玩家可以不断尝试调整路径，直至找到正确的解法。
    - 如果玩家的解法错误，系统会提示，但不会自动清除路径。
  - 重置机制：
    - 不需要额外的“重置”按钮，玩家只需重新开始绘制路径即可清空当前解法并重置棋盘状态。

---
关卡设计
1. 初版关卡：
  - 初始游戏为 3×3 棋盘，包含 3 个提示数字，难度适中。
  - 固定关卡，方便调试与验证游戏逻辑。
2. 未来扩展：
  - 支持更大棋盘（如 4×4、5×5）。
  - 难度参数化，例如：提示数字数量、不可连接的格子、随机生成器等。

---
用户体验
1. 实时反馈：
  - 在鼠标拖拽过程中，实时绘制路径；如果回溯，之前的路径会自动撤回。
  - 鼠标松开后，路径保留，提示正确或错误状态。
2. 温和提示：
  - 错误操作（如跳跃格子、错误顺序）以颜色变化（浅红）为主，避免过于打断用户体验。
3. 简化界面：
  - 不添加过多按钮，用户体验尽量清爽流畅。

---
技术实现
1. 路径绘制：
  - 需要实时检测鼠标拖拽的路径，并判断每一步连接是否符合相邻规则。
  - 如果鼠标移动到非相邻格子，不绘制路径；相邻时才更新路径状态。
2. 棋盘与状态管理：
  - 使用二维数组表示棋盘状态。
  - 每个格子包含以下属性：数字（提示数字或空白）、是否已连接、当前的连接顺序等。
3. 提示逻辑：
  - 每次玩家连接到提示数字的格子，实时校验是否符合正确顺序；否则，给予背景颜色提示。
4. 多关卡支持：
  - 未来支持动态生成关卡，可基于预设模板或随机生成器实现。

---
可视化设计
1. 路径显示：
  - 当前路径以直线形式连接格子。
  - 颜色、粗细固定，与路径是否正确无关。
2. 格子状态：
  - 正确路径：正常颜色。
  - 错误路径：对应格子显示浅红提示色。
3. 界面简洁：
  - 不添加过多按钮或动画，仅保留必要的操作和视觉提示。

---
不支持的功能
1. 暂不考虑移动端支持，仅专注于鼠标操作的 Web 游戏。
2. 动画、渐变颜色、音效提示等功能归入未来优化清单，初版不实现。

---
未来扩展
1. 增加随机生成关卡的逻辑，支持多难度配置。
2. 扩展到触屏设备支持移动端体验。
3. 添加分数、时间限制等机制提升挑战性。
4. 增加视觉优化（如路径动画、渐变提示色等）。



---
对以上规则的补充说明
对角线不相邻的影响
- 路径检测逻辑：鼠标从一个格子拖拽到目标格子时，需要即时校验是否水平或垂直相邻。如果不满足条件，不进行任何路径更新操作。
- 用户体验：由于对角线连接是无效操作，因此不需要显示明显的错误提示，仅忽略该操作即可。

---
附加开发逻辑
状态维护与路径验证
- 棋盘状态通过二维数组表示，每个格子记录以下属性：
  1. 是否包含提示数字，以及数字值。
  2. 当前是否被路径连接。
  3. 当前路径序号（用于校验路径顺序）。
- 每次路径绘制时，需即时校验：
  1. 是否符合相邻规则。
  2. 是否符合提示数字的顺序规则。





 ## 第一步
- 当用户向你提出任何需求时，你首先应该浏览根目录下的readme.md文件和所有代码文档，理解这个项目的目标、架构、实现方式等。如果还没有readme文件，你应该创建，这个文件将作为用户使用你提供的所有功能的说明书，以及你对项目内容的规划。因此你需要在readme.md文件中清晰描述所有功能的用途、使用方法、参数说明、返回值说明等，确保用户可以轻松理解和使用这些功能。

    ## 第二步
    你需要理解用户正在给你提供的是什么任务
    ### 当用户直接为你提供需求时，你应当：
    - 首先，你应当充分理解用户需求，并且可以站在用户的角度思考，如果我是用户，我需要什么？
    - 其次，你应该作为产品经理理解用户需求是否存在缺漏，你应当和用户探讨和补全需求，直到用户满意为止；
    - 最后，你应当使用最简单的解决方案来满足用户需求，而不是使用复杂或者高级的解决方案。

    ### 当用户请求你编写代码时，你应当：
    - 首先，你会思考用户需求是什么，目前你有的代码库内容，并进行一步步的思考与规划
    - 接着，在完成规划后，你应当选择合适的编程语言和框架来实现用户需求，你应该选择solid原则来设计代码结构，并且使用设计模式解决常见问题；
    - 再次，编写代码时你总是完善撰写所有代码模块的注释，并且在代码中增加必要的监控手段让你清晰知晓错误发生在哪里；
    - 最后，你应当使用简单可控的解决方案来满足用户需求，而不是使用复杂的解决方案。

    ### 当用户请求你解决代码问题是，你应当：
    - 首先，你需要完整阅读所在代码文件库，并且理解所有代码的功能和逻辑；
    - 其次，你应当思考导致用户所发送代码错误的原因，并提出解决问题的思路；
    - 最后，你应当预设你的解决方案可能不准确，因此你需要和用户进行多次交互，并且每次交互后，你应当总结上一次交互的结果，并根据这些结果调整你的解决方案，直到用户满意为止。

    ## 第三步
在完成用户要求的任务后，你应该对改成任务完成的步骤进行反思，思考项目可能存在的问题和改进方式，并更新在readme.md文件中